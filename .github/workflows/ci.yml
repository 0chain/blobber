name: CI

on:
  push:
  release:
    types:
      - published

env:
  BLOBBER_REGISTRY: ${{ secrets.BLOBBER_REGISTRY }}
  VALIDATOR_REGISTRY: ${{ secrets.VALIDATOR_REGISTRY }}

jobs:
  integration-tests:
    runs-on: ubuntu-20.04
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.x
      - uses: actions/checkout@v2
      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      - name: Build
        run: |
          ./docker.local/bin/blobber.init.setup.sh
          docker network create --driver=bridge --subnet=198.18.0.0/15 --gateway=198.18.0.255 testnet0
          ./docker.local/bin/build.blobber.sh
          cd docker.local/blobber1; ../bin/blobber.start_bls.sh </dev/null &>/dev/null &
          cd code/go/0chain.net
          go test blobbercore/handler/grpc_handler_integration_test.go --args integration

  test:
    runs-on: ubuntu-20.04
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.14.x
    - uses: actions/checkout@v2
    - name: Test
      run: make test


  generated-files-integrity:
    runs-on: ubuntu-20.04
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.x
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          cd code/go/0chain.net/blobbercore
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \
          github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \
          google.golang.org/protobuf/cmd/protoc-gen-go \
          google.golang.org/grpc/cmd/protoc-gen-go-grpc
          git reset --hard
      - name: Generate Files
        run: |
          cd code/go/0chain.net/blobbercore
          ./scripts/generate-grpc.sh
      - name: Fail if any file has changed
        run: if output=$(git status --porcelain) && [ -z "$output" ]; then exit 0; else git status; exit 1; fi;

  dockerize_blobber:
    runs-on: ubuntu-20.04
    needs: test
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/checkout@v2

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build
      run: |
        docker build -t $BLOBBER_REGISTRY:$TAG -f docker.local/Dockerfile .
        docker push $BLOBBER_REGISTRY:$TAG
      env:
        TAG: ${{ steps.get_version.outputs.VERSION }}

  dockerize_validator:
    runs-on: ubuntu-20.04
    needs: test
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/checkout@v2

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build
      run: |
        docker build -t $VALIDATOR_REGISTRY:$TAG -f docker.local/ValidatorDockerfile .
        docker push $VALIDATOR_REGISTRY:$TAG
      env:
        TAG: ${{ steps.get_version.outputs.VERSION }}
