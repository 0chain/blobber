// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	reference "0chain.net/blobbercore/reference"
)

// ReferencePackage is an autogenerated mock type for the ReferencePackage type
type ReferencePackage struct {
	mock.Mock
}

// GetCollaborators provides a mock function with given fields: ctx, refID
func (_m *ReferencePackage) GetCollaborators(ctx context.Context, refID int64) ([]reference.Collaborator, error) {
	ret := _m.Called(ctx, refID)

	var r0 []reference.Collaborator
	if rf, ok := ret.Get(0).(func(context.Context, int64) []reference.Collaborator); ok {
		r0 = rf(ctx, refID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reference.Collaborator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, refID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommitMetaTxns provides a mock function with given fields: ctx, refID
func (_m *ReferencePackage) GetCommitMetaTxns(ctx context.Context, refID int64) ([]reference.CommitMetaTxn, error) {
	ret := _m.Called(ctx, refID)

	var r0 []reference.CommitMetaTxn
	if rf, ok := ret.Get(0).(func(context.Context, int64) []reference.CommitMetaTxn); ok {
		r0 = rf(ctx, refID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reference.CommitMetaTxn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, refID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReferenceFromLookupHash provides a mock function with given fields: ctx, allocationID, path_hash
func (_m *ReferencePackage) GetReferenceFromLookupHash(ctx context.Context, allocationID string, path_hash string) (*reference.Ref, error) {
	ret := _m.Called(ctx, allocationID, path_hash)

	var r0 *reference.Ref
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *reference.Ref); ok {
		r0 = rf(ctx, allocationID, path_hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reference.Ref)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, allocationID, path_hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsACollaborator provides a mock function with given fields: ctx, refID, clientID
func (_m *ReferencePackage) IsACollaborator(ctx context.Context, refID int64, clientID string) bool {
	ret := _m.Called(ctx, refID, clientID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) bool); ok {
		r0 = rf(ctx, refID, clientID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
