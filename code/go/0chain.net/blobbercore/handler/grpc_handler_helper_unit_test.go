package handler

import (
	"context"
	"testing"

	"0chain.net/blobbercore/config"
	coreConfig "0chain.net/core/config"
	"github.com/0chain/gosdk/core/zcncrypto"

	"0chain.net/blobbercore/allocation"
	"0chain.net/blobbercore/reference"
	"github.com/stretchr/testify/mock"
)

// StorageHandlerI is an autogenerated mock type for the StorageHandlerI type
type storageHandlerI struct {
	mock.Mock
}

// verifyAllocation provides a mock function with given fields: ctx, tx, readonly
func (_m *storageHandlerI) verifyAllocation(ctx context.Context, tx string, readonly bool) (*allocation.Allocation, error) {
	ret := _m.Called(ctx, tx, readonly)

	var r0 *allocation.Allocation
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *allocation.Allocation); ok {
		r0 = rf(ctx, tx, readonly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*allocation.Allocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, tx, readonly)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// verifyAuthTicket provides a mock function with given fields: ctx, authTokenString, allocationObj, refRequested, clientID
func (_m *storageHandlerI) verifyAuthTicket(ctx context.Context, authTokenString string, allocationObj *allocation.Allocation, refRequested *reference.Ref, clientID string) (bool, error) {
	ret := _m.Called(ctx, authTokenString, allocationObj, refRequested, clientID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, *allocation.Allocation, *reference.Ref, string) bool); ok {
		r0 = rf(ctx, authTokenString, allocationObj, refRequested, clientID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *allocation.Allocation, *reference.Ref, string) error); ok {
		r1 = rf(ctx, authTokenString, allocationObj, refRequested, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func GeneratePubPrivateKey(t *testing.T) (string, string, zcncrypto.SignatureScheme) {

	config.Configuration.Config = &coreConfig.Config{SignatureScheme: "bls0chain"}
	signScheme := zcncrypto.NewSignatureScheme(config.Configuration.SignatureScheme)
	wallet, err := signScheme.GenerateKeys()
	if err != nil {
		t.Fatal(err)
	}
	keyPair := wallet.Keys[0]

	signScheme.SetPrivateKey(keyPair.PrivateKey)
	signScheme.SetPublicKey(keyPair.PublicKey)

	return keyPair.PublicKey, keyPair.PrivateKey, signScheme
}
