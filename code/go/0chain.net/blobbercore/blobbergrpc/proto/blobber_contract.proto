syntax = "proto3";
package blobber;

option go_package = "code/go/0chain.net/blobbercore/blobbergrpc";

import "google/api/annotations.proto";

message CollaboratorRequest {
  string allocation = 1;
  string collab_id = 2;
  string method = 3;
  string path = 4;
  string path_hash = 5;
}

message CollaboratorResponse {
  string message = 1;
  repeated Collaborator collaborators = 2;
}

message CalculateHashRequest {
  string allocation = 1;
  string path = 2;
  string paths = 3;
}

message CalculateHashResponse {
  string message = 1;
}

message CommitRequest {
  string allocation = 1;
  string connection_id = 2;
  string write_marker = 3;
}


message CommitResponse {
  string allocation_root = 1;
  WriteMarker write_marker = 2;
  string error_message = 3;
  bool success = 4;
}

message CommitMetaTxnRequest {
  string path = 1;
  string path_hash = 2;
  string auth_token = 3;
  string allocation = 4;
  string txn_id = 5;
}

message CommitMetaTxnResponse {
  string message = 1;
}

message GetObjectTreeRequest {
  string path = 1;
  string allocation = 2;
}

message GetObjectTreeResponse {
  ReferencePath reference_path = 1;
  WriteMarker latest_wm = 2;
}

message GetReferencePathRequest {
  string paths = 1;
  string path = 2;
  string allocation = 3;
}

message GetReferencePathResponse {
  ReferencePath reference_path = 1;
  WriteMarker latest_wm = 2;
}

message ReferencePath {
  FileRef meta_data = 1;
  repeated ReferencePath list = 2;
}

message GetObjectPathRequest {
  string allocation = 1;
  string path = 2;
  string block_num = 3;
}

message GetObjectPathResponse {
  ObjectPath object_path = 1;
  WriteMarker latest_write_marker = 2;
}

message ObjectPath {
  string root_hash = 1;
  FileRef meta = 2;
  FileRef path = 3;
  repeated FileRef path_list = 4;
  int64 file_block_num = 5;
}

message WriteMarker {
  string allocation_root = 1;
  string previous_allocation_root = 2;
  string allocation_id = 3;
  int64 size = 4;
  string blobber_id = 5;
  int64 timestamp = 6;
  string client_id = 7;
  string signature = 8;
}

message ListEntitiesRequest {
  string path = 1;
  string path_hash = 2;
  string auth_token = 3;
  string allocation = 4;
}

message ListEntitiesResponse {
  string allocation_root = 1;
  FileRef meta_data = 2;
  repeated FileRef entities = 3;
}

message GetFileStatsRequest {
string path = 1;
string path_hash = 2;
string allocation = 3;
}

message GetFileStatsResponse {
  FileRef meta_data = 1;
  FileStats stats = 2;
}

message FileStats {
  int64 id = 1;
  int64 ref_id = 2;
  int64 num_updates = 3;
  int64 num_block_downloads = 4;
  int64 success_challenges = 5;
  int64 failed_challenges = 6;
  string last_challenge_response_txn = 7;
  string write_marker_redeem_txn = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
}

message GetFileMetaDataRequest {
  string path = 1;
  string path_hash = 2;
  string auth_token = 3;
  string allocation = 4;
}

message GetFileMetaDataResponse {
  FileRef meta_data = 1;
  repeated Collaborator collaborators = 2;
}

message CommitMetaTxn {
  int64 ref_id = 1;
  string txn_id = 2;
  int64 created_at = 3;
}

message Collaborator {
  int64 ref_id = 1;
  string client_id = 2;
  int64 created_at = 3;
}

message GetAllocationRequest {
  string id = 1;
}

message GetAllocationResponse {
  Allocation allocation = 1;
}

message DownloadFileRequest {
  string allocation = 1;
  string path = 2;
  string path_hash = 3;
  string rx_pay = 4;
  string block_num = 5;
  string num_blocks = 6;
  string read_marker = 7;
  string auth_token = 8;
  string content = 9;
}

message DownloadFileResponse {
  bool success = 1;
  bytes data = 2;
  string allocation_id = 3;
  string path = 4;
  ReadMaker latest_rm = 5;
}

message ReadMaker {
  string           client_id = 1;
  string           client_public_key = 2;
  string           blobber_id = 3;
  string           allocation_id = 4;
  string           owner_id = 5;
  int64            timestamp = 6;
  int64            counter = 7;
  string           signature = 8;
  int64            suspend = 9;
  string           payer_id = 10;
  bytes            auth_ticket = 11;
}

message UpdateObjectAttributesRequest {
  string allocation = 1;
  string path = 2;
  string path_hash = 3;
  string connection_id = 4;
  string attributes = 5;
}

message UpdateObjectAttributesResponse {
  int64 who_pays_for_reads = 1;
}

message CopyObjectRequest {
  string allocation = 1;
  string path = 2;
  string path_hash = 3;
  string connection_id = 4;
  string dest = 5;
}

message CopyObjectResponse {
  string filename = 1;
  int64  size = 2;
  string content_hash = 3;
  string merkle_root = 4;
  //UploadLength indicates the size of the entire upload in bytes. The value MUST be a non-negative integer.
  int64 upload_length = 5;
  //Upload-Offset indicates a byte offset within a resource. The value MUST be a non-negative integer.
  int64 upload_offset = 6;
}

message RenameObjectRequest {
  string allocation = 1;
  string path = 2;
  string path_hash = 3;
  string connection_id = 4;
  string new_name = 5;
}

message RenameObjectResponse {
  string filename = 1;
  int64  size = 2;
  string content_hash = 3;
  string merkle_root = 4;
  //UploadLength indicates the size of the entire upload in bytes. The value MUST be a non-negative integer.
  int64 upload_length = 5;
  //Upload-Offset indicates a byte offset within a resource. The value MUST be a non-negative integer.
  int64 upload_offset = 6;
}

message UploadFileRequest {
  string allocation = 1;
  string path = 2;
  string connection_id = 3;
  string method = 4;
  string upload_meta = 5;
  string update_meta = 6;
  bytes  upload_file = 7;
  bytes  upload_thumbnail_file = 8;
}
message UploadFileResponse {
  string filename = 1;
  int64 size = 2;
  string content_hash = 3;
  string merkle_root = 4;
  //UploadLength indicates the size of the entire upload in bytes. The value MUST be a non-negative integer.
  int64 upload_length = 5;
  //Upload-Offset indicates a byte offset within a resource. The value MUST be a non-negative integer.
  int64 upload_offset = 6;
}

message Allocation {
  string id = 1;
  string tx = 2;
  int64  total_size = 3;
  int64 used_size = 4;
  string owner_id = 5;
  string owner_public_key = 6;
  string repairer_id = 7;
  string payer_id = 8;
  int64 expiration = 9;
  string allocation_root = 10;
  int64 blobber_size = 11;
  int64 blobber_size_used = 12;
  string latest_redeemed_wm = 13;
  bool is_redeem_required = 14;
  int64 time_unit = 15;
  bool cleaned_up = 16;
  bool finalized = 17;
  repeated Term terms = 18;
}

message Term {
  int64 id = 1;
  string blobber_id = 2;
  string allocation_id = 3;
  int64 read_price = 4;
  int64 write_price = 5;
}

message FileRef {
  string type = 1;
  FileMetaData file_meta_data = 2;
  DirMetaData dir_meta_data = 3;
}

message FileMetaData {
  string type = 1;
  string lookup_hash = 2;
  string name = 3;
  string path = 4;
  string hash = 5;
  int64 num_blocks = 6;
  string path_hash = 7;
  string custom_meta = 8;
  string content_hash = 9;
  int64 size = 10;
  string merkle_root = 11;
  int64 actual_file_size = 12;
  string actual_file_hash = 13;
  string mime_type = 14;
  int64 thumbnail_size = 15;
  string thumbnail_hash = 16;
  int64 actual_thumbnail_size = 17;
  string actual_thumbnail_hash = 18;
  string encrypted_key = 19;
  bytes attributes = 20;
  bool on_cloud = 21;
  repeated CommitMetaTxn commit_meta_txns = 22;
  int64 created_at = 23;
  int64 updated_at = 24;
}

message DirMetaData {
  string type = 1;
  string lookup_hash = 2;
  string name = 3;
  string path = 4;
  string hash = 5;
  int64 num_blocks = 6;
  string path_hash = 7;
  int64 size = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
}
