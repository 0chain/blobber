@startuml FileSharing

title File Sharing - Public / Private

actor Client

0Box -> 0Box : Setup a wallet, fund this wallet
Client -> 0Box : Choose the plan for 0Box storage
0Box --> Client : KYC, Payment page
Client -> Client : Create a wallet
Client -> 0Box : KYC, Payment details, wallet details for the storage
0Box -> 0Box : Stores the KYC details,\nprocess payment
0Box -> Blockchain : Create a new allocation for the user \n(owner is client, payer is 0Box)
0Box -> Blockchain : Fund the write pool with daily limit
0Box -> Blockchain : Fund the read pool with daily limit
0Box -> 0Box : Waits for confirmation for the 3 txns
0Box --> Client : Success / Failure

loop everday
0Box -> 0Box : Checks funds for funding read and write pools
0Box -> Blockchain : Fund the read and write pools for clients
end loop

Client -> Blobber : Uploads file(s) encrypted with public key
Blobber --> Client : Upload response
Client -> Blobber : Write marker if upload is successful
Blobber --> Client : Write marker accepted / rejected
Blobber -> Blockchain : Redeems the wm if successful upload


group PublicShare - anyone with link
Client -> Client : Generate a shared key-pair \n\
Generate a re-encryption key for each blobber \n\
anyone with the shared private key can access file 
Client -> Blobber : Add a valid re-enc key for the file
Blobber -> Client : Change accepted
Client -> Blobber : Commit the change and pass wm (after 12 blobbers pass)
Blobber --> Client : Change committed
Client -> 0Box : Get a share link (file, path, auth-ticket, shared secret key)
0Box --> Client : Shareable link

RClient -> 0Box : Clicks on the shared link
0Box --> RClient : navigate to app (shared secret key, auth ticket) 
RClient -> Blobber : Requests for file - passes the auth ticket with the read marker
Blobber -> Blobber : Checks if the re-enc key in the auth ticket is same as in the blobber
Blobber -> Blobber : Re-encrypts the file with the re-enc key
Blobber --> RClient : file response
RClient -> RClient : uses the shared secret key to decrypt the file
end 

group PrivateShare
Client -> Client : Generate a re-encryption key for receiver
Client -> Blobber : Make file accessible to receiver and pass re-enc key
Blobber -> Client : Change accepted
Client -> Blobber : Commit the change and pass wm (after 12 pass)
Blobber --> Client : Change committed

Client -> Client : Generates an authorization ticket for receiver
Client -> 0Box : Get a share link (passes the auth ticket)
0Box --> Client : Shareable link

RClient -> 0Box : Clicks on the shared link
0Box --> RClient : Create 0Box account / login
RClient -> 0Box : account creation / sign in
RClient -> Blobber : Requests for file, pass auth ticket
Blobber -> Blobber : Checks for access by receiver, \nre-enc file with re-enc key of receiver
Blobber --> RClient : file response
RClient -> RClient : decrypt with private key
end 


@enduml